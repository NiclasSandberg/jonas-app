{"version":3,"sources":["assets/img/Cover.jpg","assets/img/mindrekant.jpg","assets/img/webb_cover.jpg","assets/img/1440.jpg","assets/img/1280.jpg","assets/img/cp.jpg","assets/img/bredare_nologo.jpg","assets/img/nologo.jpg","assets/img/nologoleft.jpg","assets/img/Wake.jpg","assets/img/ugly.jpg","components/Cardz.jsx","components/Home.jsx","components/About.jsx","components/CustomNavbar.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cardz","Fragment","Card","className","Img","id","variant","src","mindrekant","Body","Image","Jonasbild","fluid","Text","Home","state","Component","About","Container","Jumbotron","to","Row","style","border","Col","CustomNavbar","Navbar","collapseOnSelect","expand","bg","Toggle","aria-controls","Brand","href","Collapse","Nav","Link","eventKey","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,iGCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,gC,mBCA3CD,EAAOC,QAAU,IAA0B,4C,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,wCCA3CD,EAAOC,QAAU,IAA0B,kC,0QCoD5BC,G,YApCD,WACZ,OACE,kBAAC,IAAMC,SAAP,KAII,kBAACC,EAAA,EAAD,CAAMC,UAAU,cACd,kBAACD,EAAA,EAAKE,IAAN,CAAWC,GAAG,cAAcC,QAAQ,MAAMC,IAAKC,MAE/C,kBAACN,EAAA,EAAKO,KAAN,MAGA,kBAACC,EAAA,EAAD,CAAOL,GAAG,aAAYE,IAAKI,IAAWC,OAAK,IAC3C,kBAACV,EAAA,EAAKW,KAAN,CAAWV,UAAU,cAArB,2CAXN,kFCDWW,E,4MAXXC,MAAQ,G,uDAEJ,OACI,kBAAC,IAAMd,SAAP,KACA,kBAAC,EAAD,W,GALOe,a,gCC2BJC,E,4MAzBXF,MAAQ,G,uDAGJ,OACI,kBAAC,IAAMd,SAAP,KACA,kBAACiB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KAEI,kBAAC,IAAD,CAAMC,GAAG,KAAI,8CAMrB,kBAACC,EAAA,EAAD,CAAKC,MAAO,CAACC,OAAO,mBACpB,kBAACC,EAAA,EAAD,CAAKrB,UAAU,wBAAf,cACA,kBAACqB,EAAA,EAAD,CAAKrB,UAAU,wBAAf,cACA,kBAACqB,EAAA,EAAD,CAAKrB,UAAU,wBAAf,oB,GAlBQa,a,gBCuBLS,G,kNAvBXV,MAAQ,G,uDAEJ,OACI,kBAACW,EAAA,EAAD,CAAQvB,UAAU,OAAOwB,kBAAgB,EAACC,OAAO,KAAKC,GAAG,OAAOvB,QAAQ,QACpE,kBAACY,EAAA,EAAD,CAAWU,OAAO,MAElB,kBAACF,EAAA,EAAOI,OAAR,CAAe3B,UAAU,UAAU4B,gBAAc,0BAClD,kBAACL,EAAA,EAAOM,MAAR,CAAc7B,UAAU,aAAa8B,KAAK,SAA1C,eACC,kBAACP,EAAA,EAAOQ,SAAR,CAAiB7B,GAAG,0BAChB,kBAAC8B,EAAA,EAAD,CAAKhC,UAAU,WACf,kBAACgC,EAAA,EAAIC,KAAL,CAAUH,KAAK,UAAf,QACI,kBAACE,EAAA,EAAIC,KAAL,CAAUH,KAAK,UAAf,SACA,kBAACE,EAAA,EAAIC,KAAL,CAAUC,SAAU,EAAGJ,KAAK,UAA5B,SACA,kBAACE,EAAA,EAAIC,KAAL,CAAUC,SAAU,EAAGJ,KAAK,UAA5B,oB,GAdGjB,cCmBZsB,MAbf,WACE,OACI,kBAAC,IAAD,KACE,kBAAC,IAAMrC,SAAP,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOsC,OAAK,EAACC,KAAK,IAAIC,UAAW3B,IACjC,kBAAC,IAAD,CAAO0B,KAAK,SAASC,UAAWxB,OCNtByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.08c6c7a0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Cover.5028d72f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mindrekant.9a2f9539.jpg\";","module.exports = __webpack_public_path__ + \"static/media/webb_cover.09dfe100.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1440.8905caa0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/1280.6af356ca.jpg\";","module.exports = __webpack_public_path__ + \"static/media/cp.0e2febfe.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bredare_nologo.6eb9a348.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nologo.e6a98412.jpg\";","module.exports = __webpack_public_path__ + \"static/media/nologoleft.a1973af4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/Wake.4b130f81.jpg\";","module.exports = __webpack_public_path__ + \"static/media/ugly.c062ea47.jpg\";","import { Card, Image, Carousel, Container } from 'react-bootstrap';\r\nimport React from 'react'\r\nimport Jonasbild from '../assets/img/Cover.jpg';\r\nimport JonasWebb from '../assets/img/webb_cover.jpg';\r\nimport tusen from '../assets/img/1440.jpg';\r\nimport tusentva from '../assets/img/1280.jpg';\r\nimport cp from '../assets/img/cp.jpg';\r\nimport bredare_nologo from '../assets/img/bredare_nologo.jpg';\r\nimport nologo from '../assets/img/nologo.jpg';\r\nimport nologoleft from '../assets/img/nologoleft.jpg';\r\nimport Wake from '../assets/img/Wake.jpg';\r\nimport mindrekant from '../assets/img/mindrekant.jpg';\r\nimport Cards from './Cardz.css';\r\nimport Ugly from '../assets/img/ugly.jpg';\r\n\r\n\r\nconst Cardz = () => {\r\n  return (\r\n    <React.Fragment>\r\n   \r\n     \r\n        \r\n        <Card className=\"wh-50 mt-1\">\r\n          <Card.Img  id=\"jonasCover1\" variant=\"top\" src={mindrekant} />\r\n          \r\n          <Card.Body>\r\n            \r\n          </Card.Body>\r\n          <Image id=\"jonasCover\"src={Jonasbild} fluid />\r\n          <Card.Text className=\"jonasCover\">\r\n              New Single out now! Listen on Spotify.\r\n          </Card.Text>\r\n        </Card>\r\n      \r\n        //kom ihåg att kolla udemy lägga ovanpå cardet, overlay bakgrunden?\r\n      \r\n\r\n\r\n\r\n    \r\n    \r\n\r\n    \r\n    \r\n    \r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\nexport default Cardz;","import React, { Component } from 'react';\r\nimport { Jumbotron, Container } from 'react-bootstrap';\r\nimport Cardz from './Cardz';\r\n\r\n\r\nclass Home extends Component {\r\n    state = {  }\r\n    render() { \r\n        return ( \r\n            <React.Fragment>\r\n            <Cardz />\r\n            \r\n            </React.Fragment>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Home;","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport { Jumbotron, Container, Row, Col, Image } from 'react-bootstrap';\r\n\r\n\r\n\r\nclass About extends Component {\r\n    state = {  }\r\n    render() { \r\n       // className=\"col-sm-6 col-md-8 col-lg-9 col-xl-10\" \r\n        return ( \r\n            <React.Fragment>\r\n            <Container>\r\n                <Jumbotron>\r\n\r\n                    <Link to=\"/\"><h2>About Jonas</h2>\r\n                    \r\n                    </Link>\r\n                </Jumbotron>\r\n            </Container>\r\n            \r\n            <Row style={{border:\"1px solid #333\"}}>\r\n            <Col className=\"p-4 item-hl col-sm-8\">Flex Item1</Col>\r\n            <Col className=\"p-4 item-hl col-sm-2\">Flex Item2</Col>\r\n            <Col className=\"p-4 item-hl col-sm-2\">Flex Item3</Col>\r\n          </Row>\r\n          </React.Fragment>\r\n\r\n         );\r\n    }\r\n}\r\n \r\nexport default About;","import React, { Component } from 'react';\r\nimport { Navbar, Nav, NavItem, NavDropdown, Form, FormControl, Button, Row, Grid, Col, Container } from 'react-bootstrap';\r\nimport { Link } from 'react-router-dom';\r\nimport './CustomNavbar.css';\r\n\r\nclass CustomNavbar extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <Navbar className=\"mt-1\" collapseOnSelect expand=\"md\" bg=\"dark\" variant=\"dark\">\r\n                <Container expand=\"lg\">\r\n                \r\n                <Navbar.Toggle className=\"ml-auto\" aria-controls=\"responsive-navbar-nav\" />\r\n               <Navbar.Brand className=\"brandTitle\" href=\"#home\">JONAS SNITT</Navbar.Brand>\r\n                <Navbar.Collapse id=\"responsive-navbar-nav \">\r\n                    <Nav className=\"ml-auto\">\r\n                    <Nav.Link href=\"#deets\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#deets\">Media</Nav.Link>\r\n                        <Nav.Link eventKey={2} href=\"#memes\">About</Nav.Link>\r\n                        <Nav.Link eventKey={2} href=\"#memes\">Pictures</Nav.Link>\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n                </Container>\r\n            </Navbar>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default CustomNavbar;\r\n\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport Home from './components/Home';\nimport About from './components/About';\nimport CustomNavbar from './components/CustomNavbar';\nimport Cardz from './components/Cardz';\n\n\n\nfunction App() {\n  return (\n      <Router>\n        <React.Fragment>\n          <CustomNavbar />\n          <Cardz />\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n      </React.Fragment>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}